Node.js Project Setup Notes
===========================

This file contains step-by-step notes for setting up a Node.js project, installing packages, using Express, configuring view engines, middlewares, and handling routes & forms.

----------------------------------------------------------------------
1. Initialize a Node.js Project
----------------------------------------------------------------------
Command:
    npm init -y

- Creates a new Node.js project with default settings.
- Generates a "package.json" file which stores:
  • Project metadata (name, version, description)
  • Dependencies and devDependencies
  • Scripts (like "start", "dev" etc.)

----------------------------------------------------------------------
2. Installing Packages
----------------------------------------------------------------------

Example: cat-me package
    npm i cat-me

- Installs the "cat-me" package (a fun ASCII cat generator).
Usage:
    const cat = require('cat-me');
    console.log(cat()); // Prints a random ASCII cat

Core Module Example: http
    const http = require('http');
- No need to install, it is built into Node.js.

----------------------------------------------------------------------
3. Nodemon (Auto Restart Server)
----------------------------------------------------------------------
Command:
    npx nodemon

- Runs your project with automatic server restart whenever files are saved.
- Very useful for development (no need to manually restart server each time).

----------------------------------------------------------------------
4. Express.js Setup
----------------------------------------------------------------------
Command:
    npm i express

- Installs Express.js, the most popular framework for Node.js.
- Makes it easier to handle routes, requests, responses, and middleware.

Basic server example:
    const express = require('express');
    const app = express();

    app.get('/', (req, res) => {
      res.send('Hello World from Express!');
    });

    app.listen(3000, () => {
      console.log('Server running on http://localhost:3000');
    });

----------------------------------------------------------------------
5. View Engine (EJS)
----------------------------------------------------------------------

Command:
    npm i ejs

- EJS (Embedded JavaScript Templates) lets you render dynamic HTML pages.
- It works with template files that have .ejs extension.

Setup in Express:
    app.set('view engine', 'ejs');

Usage:
    app.get('/', (req, res) => {
      res.render('index', { title: 'Home Page' });
    });

Notes:
- The file "index.ejs" should be inside a "views" folder.
- The object { title: 'Home Page' } passes data to the template.

----------------------------------------------------------------------
6. Middlewares in Express
----------------------------------------------------------------------

Definition:
Middleware = Functions that execute during the request → response cycle.
They can modify requests, responses, or end the cycle.

Types of Middleware:
1. Built-in Middlewares
   - Provided by Express itself.
   Example:
       app.use(express.json()); // Parse JSON data
       app.use(express.urlencoded({ extended: true })); // Parse form data

2. Custom Middlewares
   - Written by the developer.
   Example:
       app.use((req, res, next) => {
         console.log(`${req.method} ${req.url}`);
         next(); // Pass control to next middleware/route
       });

3. Third-party Middlewares
   - Installed via npm.
   Example: Morgan (HTTP request logger)
       npm i morgan

       const morgan = require('morgan');
       app.use(morgan('dev'));

----------------------------------------------------------------------
7. Routes and Form Handling
----------------------------------------------------------------------

Routes = Define how the server responds to different client requests.

GET Request (server → frontend)
    app.get('/route', (req, res) => {
      res.send("Data from server to frontend");
    });

POST Request (frontend → server)
    app.post('/route', (req, res) => {
      console.log(req.body); // Access data sent from frontend
      res.send("Data received successfully");
    });

Notes:
- GET is used to fetch data.
- POST is used to send data (like form submissions or JSON payloads).

----------------------------------------------------------------------
8. Linking CSS and JS to Frontend (Static Files)
----------------------------------------------------------------------

In Express, any frontend file (like CSS, JS, images) cannot be accessed directly unless we tell the server to make them "public".
This is done using "static files" setup. Static files are those that the user can directly access through the browser without restrictions or authentication.

----------------------------------------------------------------------
Setup for Static Files
----------------------------------------------------------------------
Command in app.js:
    app.use(express.static("public"));

- This means: Any file inside the "public" folder can now be served directly to the frontend.
- Example: If "public/index.css" exists, then it can be accessed in the browser as:
      http://localhost:3000/index.css
- Similarly for "public/index.js":
      http://localhost:3000/index.js

----------------------------------------------------------------------
How to Link CSS in EJS (Frontend)
----------------------------------------------------------------------

Suppose we have:
    public/index.css

Inside "views/index.ejs", we link it like this:
    <link rel="stylesheet" href="/index.css">

Explanation:
- Even though the file is inside the "public" folder, we do not write "/public/index.css".
- Express serves files inside "public" directly, so we just use "/index.css".

Example index.ejs:
    <!DOCTYPE html>
    <html>
      <head>
        <title>Home</title>
        <link rel="stylesheet" href="/index.css">
      </head>
      <body>
        <h1>Hello with CSS!</h1>
      </body>
    </html>

----------------------------------------------------------------------
How to Link JS in EJS (Frontend)
----------------------------------------------------------------------

Suppose we have:
    public/index.js

Inside "views/index.ejs", we link it like this:
    <script src="/index.js"></script>

Example index.ejs:
    <!DOCTYPE html>
    <html>
      <head>
        <title>Home</title>
        <link rel="stylesheet" href="/index.css">
      </head>
      <body>
        <h1>Hello with CSS and JS!</h1>
        <script src="/index.js"></script>
      </body>
    </html>

----------------------------------------------------------------------
Key Notes
----------------------------------------------------------------------
- Any file inside "public" folder can be linked directly with "/filename".
- Common practice:
    public/
      ├── index.css
      ├── index.js
      └── images/logo.png
- Example for image in EJS:
    <img src="/images/logo.png" alt="Logo">

This way, frontend files go:
    Request from frontend -> served by backend (Express) -> directly accessible due to express.static



10.mongo DB
