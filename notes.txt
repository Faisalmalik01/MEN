# 📝 Node.js Project Setup Notes

This file contains **step-by-step notes** for setting up a Node.js project, installing packages, using Express, configuring view engines, and handling routes & forms.

---

## 🚀 1. Initialize a Node.js Project
```bash
npm init -y
````

* Creates a new Node.js project with **default settings**.
* Generates a `package.json` file which stores project metadata and dependencies.

---

## 📦 2. Installing Packages

### Example Package: `cat-me`

```bash
npm i cat-me
```

* Installs the **`cat-me`** package (a fun ASCII cat generator).

Usage in code:

```js
const cat = require('cat-me'); 
console.log(cat()); // Prints a random ASCII cat
```

### Core Module Example: `http`

```js
const http = require('http'); 
// No need to install, comes with Node.js
```

---

## 🔄 3. Nodemon (Auto Restart Server)

```bash
npx nodemon
```

* Runs your project with **automatic server restart** whenever you save changes.
* Useful for development.

---

## 🌐 4. Express.js Setup

```bash
npm i express
```

* Installs **Express.js**, the most popular Node.js framework for building web apps and APIs.

Basic server example:

```js
const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello World from Express!');
});

app.listen(3000, () => {
  console.log('Server running on http://localhost:3000');
});
```

---

## 🎨 5. View Engine (EJS)

To render **dynamic HTML** pages with templates:

```bash
npm i ejs
```

Setup:

```js
app.set('view engine', 'ejs');
```

Usage:

```js
app.get('/', (req, res) => {
  res.render('index', { title: 'Home Page' });
});
```

* Here, `index.ejs` should be inside the `views/` folder.
* The object `{ title: 'Home Page' }` passes data to the template.

---

## ⚙️ 6. Middlewares in Express

**Middleware** = Functions that run between request and response.
There are **3 types of middleware**:

1. **Built-in Middlewares**

   * Already available in Express.

   ```js
   app.use(express.json()); // Parse JSON data
   app.use(express.urlencoded({ extended: true })); // Parse form data (like HTML forms)
   ```

2. **Custom Middlewares**

   * Created by you.

   ```js
   app.use((req, res, next) => {
     console.log(`${req.method} ${req.url}`);
     next(); // Passes control to next middleware/route
   });
   ```

3. **Third-party Middlewares**

   * Installed from npm (example: `morgan` for logging).

   ```bash
   npm i morgan
   ```

   ```js
   const morgan = require('morgan');
   app.use(morgan('dev'));
   ```

---

## 📬 7. Routes & Form Handling

Routes are used to **handle client requests**.

### GET Request

* Fetches data **from server → to frontend**.

```js
app.get('/route', (req, res) => {
  res.send("Data from server to frontend");
});
```

### POST Request

* Sends data **from frontend → to server**.

```js
app.post('/route', (req, res) => {
  console.log(req.body); // Access data sent from frontend
  res.send("Data received successfully");
});

```
✅ With this setup, you now have:

* A Node.js project with `package.json`
* Express.js server
* EJS view engine for rendering HTML
* Middlewares (built-in, custom, and third-party)
* GET & POST route handling
```
