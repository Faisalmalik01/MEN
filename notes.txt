Node.js Project Setup Notes
===========================

This file contains step-by-step notes for setting up a Node.js project, installing packages, using Express, configuring view engines, middlewares, and handling routes & forms.

----------------------------------------------------------------------
1. Initialize a Node.js Project
----------------------------------------------------------------------
Command:
    npm init -y

- Creates a new Node.js project with default settings.
- Generates a "package.json" file which stores:
  • Project metadata (name, version, description)
  • Dependencies and devDependencies
  • Scripts (like "start", "dev" etc.)

----------------------------------------------------------------------
2. Installing Packages
----------------------------------------------------------------------

Example: cat-me package
    npm i cat-me

- Installs the "cat-me" package (a fun ASCII cat generator).
Usage:
    const cat = require('cat-me');
    console.log(cat()); // Prints a random ASCII cat

Core Module Example: http
    const http = require('http');
- No need to install, it is built into Node.js.

----------------------------------------------------------------------
3. Nodemon (Auto Restart Server)
----------------------------------------------------------------------
Command:
    npx nodemon

- Runs your project with automatic server restart whenever files are saved.
- Very useful for development (no need to manually restart server each time).

----------------------------------------------------------------------
4. Express.js Setup
----------------------------------------------------------------------
Command:
    npm i express

- Installs Express.js, the most popular framework for Node.js.
- Makes it easier to handle routes, requests, responses, and middleware.

Basic server example:
    const express = require('express');
    const app = express();

    app.get('/', (req, res) => {
      res.send('Hello World from Express!');
    });

    app.listen(3000, () => {
      console.log('Server running on http://localhost:3000');
    });

----------------------------------------------------------------------
5. View Engine (EJS)
----------------------------------------------------------------------

Command:
    npm i ejs

- EJS (Embedded JavaScript Templates) lets you render dynamic HTML pages.
- It works with template files that have .ejs extension.

Setup in Express:
    app.set('view engine', 'ejs');

Usage:
    app.get('/', (req, res) => {
      res.render('index', { title: 'Home Page' });
    });

Notes:
- The file "index.ejs" should be inside a "views" folder.
- The object { title: 'Home Page' } passes data to the template.

----------------------------------------------------------------------
6. Middlewares in Express
----------------------------------------------------------------------

Definition:
Middleware = Functions that execute during the request → response cycle.
They can modify requests, responses, or end the cycle.

Types of Middleware:
1. Built-in Middlewares
   - Provided by Express itself.
   Example:
       app.use(express.json()); // Parse JSON data
       app.use(express.urlencoded({ extended: true })); // Parse form data

2. Custom Middlewares
   - Written by the developer.
   Example:
       app.use((req, res, next) => {
         console.log(`${req.method} ${req.url}`);
         next(); // Pass control to next middleware/route
       });

3. Third-party Middlewares
   - Installed via npm.
   Example: Morgan (HTTP request logger)
       npm i morgan

       const morgan = require('morgan');
       app.use(morgan('dev'));

----------------------------------------------------------------------
7. Routes and Form Handling
----------------------------------------------------------------------

Routes = Define how the server responds to different client requests.

GET Request (server → frontend)
    app.get('/route', (req, res) => {
      res.send("Data from server to frontend");
    });

POST Request (frontend → server)
    app.post('/route', (req, res) => {
      console.log(req.body); // Access data sent from frontend
      res.send("Data received successfully");
    });

Notes:
- GET is used to fetch data.
- POST is used to send data (like form submissions or JSON payloads).

----------------------------------------------------------------------
